% !Mode:: "TeX:UTF-8"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% knitr 全局设置
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<myknitr, child='../../../set/rknitr.Rnw', eval=TRUE>>=
options(replace.assign = TRUE)
render_listings()
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 正文开始
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{引言}

接触 \R 也有一段时间了,大概是从研究生一年级的时候，有授课教师便开始鼓捣我们多多学习编程语言。可是以前也只是为了应付课程作业的需要，「幼稚」地把 \R 当作一种简单的统计分析与画图之用，并没有深入编程语言的精髓部分。比如，对于 \R 中对象特征的详细讨论，我并没有一个系统化的训练与学习过程。这不得不说是一种巨大的遗憾，因为现在 \R 统计语言正发展的如火如荼，大有一统整个数据分析界的势头。而在这样的形势下，如果想要真正掌握这门语言的精髓与要领，也就不得不继续学习，希望通过对底层编程思想的透彻理解，为今后的软件使用、函数编程与数据分析提供扎实的基础。

<<>>=
x = rnorm(1000)

plot.ts(x)
@


\section{\R 是什么}


\section{\R 能做什么}

\section{为什么使用\R }

\section{怎么安装}

\section{怎么用\R}
